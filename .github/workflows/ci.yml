name: CI

permissions:
  contents: read

on:
  pull_request:
  push:
    branches:
      - main
      - dev*
      - v[0-9]+.[0-9]+
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_GIT_FETCH_WITH_CLI: true
  CARGO_NET_RETRY: 10
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUSTDOCFLAGS: -D warnings
  RUSTFLAGS: -D warnings
  RUSTUP_MAX_RETRIES: 10

defaults:
  run:
    shell: bash --noprofile --norc -CeEuxo pipefail {0}

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
  test:
    uses: taiki-e/github-actions/.github/workflows/test.yml@main
    with:
      target: x86_64-unknown-linux-gnu,aarch64-apple-darwin,x86_64-pc-windows-msvc,aarch64-unknown-linux-gnu,x86_64-apple-darwin,x86_64-pc-windows-gnu
  tidy:
    uses: taiki-e/github-actions/.github/workflows/tidy.yml@main
    permissions:
      contents: read
      pull-requests: write # for gh pr edit --add-assignee
      repository-projects: read # for gh pr edit --add-assignee
    secrets: inherit

  test-tidy:
    strategy:
      fail-fast: false
      matrix:
        include:
          # NB: Sync list with https://github.com/taiki-e/checkout-action/blob/HEAD/.github/workflows/ci.yml
          - os: ubuntu-22.04
          - os: ubuntu-22.04-arm
          - os: ubuntu-24.04
          - os: ubuntu-24.04-arm
          - os: macos-13
          - os: macos-14
          - os: macos-15
          # Error: [WinError 2] The system cannot find the file specified
          # tools/tidy.sh: error on line 89: "python${py_suffix}" -m venv .venv
          # - os: windows-2019
          # - os: windows-2019
          #   bash: msys64
          # - os: windows-2019
          #   bash: cygwin
          - os: windows-2022
          - os: windows-2022
            bash: msys64
          - os: windows-2022
            bash: cygwin
          - os: windows-2025
          - os: windows-2025
            bash: msys64
          - os: windows-2025
            bash: cygwin
    runs-on: ${{ matrix.os }}
    steps:
      - run: |
          printf '%s\n' 'C:\msys64\mingw32\bin' >>"${GITHUB_PATH}"
          printf '%s\n' 'C:\msys64\usr\bin' >>"${GITHUB_PATH}"
        if: matrix.bash == 'msys64'
      - run: |
          choco install --no-progress --requirechecksums cygwin
          printf '%s\n' 'C:\tools\cygwin\bin' >>"${GITHUB_PATH}"
          printf '%s\n' 'C:\tools\cygwin\usr\bin' >>"${GITHUB_PATH}"
        if: matrix.bash == 'cygwin'
      - uses: taiki-e/checkout-action@v1
      - run: brew install clang-format
        if: startsWith(matrix.os, 'macos')
      - uses: taiki-e/github-actions/install-rust@nightly
      - uses: taiki-e/install-action@shellcheck
      - uses: taiki-e/install-action@shfmt
      - uses: taiki-e/install-action@parse-dockerfile
      - run: tools/ci/tidy-show-deps.sh
      - run: tools/tidy.sh
      - run: brew install bash
        if: startsWith(matrix.os, 'macos')
      - run: tools/ci/tidy-show-deps.sh
        if: startsWith(matrix.os, 'macos')
      - run: tools/tidy.sh
        if: startsWith(matrix.os, 'macos')
  test-tidy-container:
    strategy:
      fail-fast: false
      matrix:
        container:
          # NB: Sync list with https://github.com/taiki-e/checkout-action/blob/HEAD/.github/workflows/ci.yml
          # ubuntu 16.04's python3 is 3.5, ubuntu 14.04's python3 is 3.4
          # SyntaxError: invalid syntax
          # Traceback (most recent call last):
          #   File ".venv/bin/tomlq", line 7, in <module>
          # - ubuntu:14.04 # glibc 2.19
          # - ubuntu:16.04 # glibc 2.23
          - ubuntu:18.04 # glibc 2.27
          - ubuntu:20.04 # glibc 2.31
          - ubuntu:22.04 # glibc 2.35
          - ubuntu:24.04 # glibc 2.39
          - debian:9-slim # glibc 2.24
          - debian:10-slim # glibc 2.28
          - debian:11-slim # glibc 2.31
          - debian:12-slim # glibc 2.36
          - fedora:latest # glibc 2.39 (as of fedora 40)
          - almalinux:8 # glibc 2.28
          - almalinux:8-minimal # glibc 2.28
          - almalinux:9 # glibc 2.34
          - almalinux:9-minimal # glibc 2.34
          # - centos:6 # glibc 2.12 # rustc/nodejs requires glibc 2.17
          - centos:7 # glibc 2.17
          # - opensuse/leap:latest # glibc 2.38 (as of leap 15.6)
          # - opensuse/tumbleweed:latest # glibc 2.39 (as of 2024-07-19)
          # - archlinux:latest # glibc 2.39 (as of 2024-07-19)
          - alpine:latest # musl 1.2.5 (as of alpine 3.20)
          # - openwrt/rootfs:x86-64-openwrt-24.10 # musl 1.2.5
    runs-on: ubuntu-latest
    timeout-minutes: 60
    container: ${{ matrix.container }}
    steps:
      - name: Install requirements (ubuntu/debian)
        run: |
          case "${{ matrix.container }}" in
            debian:9*)
              # In Debian, the old repositories is removed from the main mirrors some time after EoL.
              sed -i /etc/apt/sources.list -e 's/deb.debian.org/archive.debian.org/g' \
                -e 's|security.debian.org|archive.debian.org/|g' \
                -e '/stretch-updates/d'
              ;;
          esac
          apt-get -o Acquire::Retries=10 -qq update
          apt-get -o Acquire::Retries=10 -o Dpkg::Use-Pty=0 install -y --no-install-recommends ca-certificates curl xz-utils clang-format python3-venv
          case "${{ matrix.container }}" in
            # ubuntu 18.04/16.04 and debian 10/9's jq is 1.5, ubuntu 14.04's jq is 1.3
            # jq: error (at <stdin>:44): Invalid path expression near attempt to access element 0 of [0]
            # tools/tidy.sh: error on line 408: jq 'del(.dictionaryDefinitions[] | select(.name == "organization-dictionary" | not))'
            ubuntu:18.04* | ubuntu:16.04* | ubuntu:14.04* | debian:10* | debian:9*)
              curl --proto '=https' --tlsv1.2 -fsSL --retry 10 -o /usr/local/bin/jq https://github.com/jqlang/jq/releases/download/jq-1.6/jq-linux64
              chmod +x /usr/local/bin/jq
              ;;
          esac
        if: startsWith(matrix.container, 'ubuntu') || startsWith(matrix.container, 'debian')
      - name: Install requirements (fedora/almalinux/centos)
        run: |
          if type -P dnf >/dev/null; then
            dnf install -y clang-tools-extra python3
          elif type -P microdnf >/dev/null; then
            microdnf install -y tar xz clang-tools-extra python3
          else
            # In CentOS, the old repositories is removed from the main mirrors just after EoL.
            # https://github.com/rust-lang/rust/pull/126352
            sed -i /etc/yum.repos.d/*.repo -e 's!^mirrorlist!#mirrorlist!' \
              -e 's!^#baseurl=http://mirror.centos.org/!baseurl=https://vault.centos.org/!'
            sed -i 's/enabled=1/enabled=0/' /etc/yum/pluginconf.d/fastestmirror.conf
            yum install -y xz clang python3
          fi
        if: startsWith(matrix.container, 'fedora') || startsWith(matrix.container, 'almalinux') || startsWith(matrix.container, 'centos')
      - name: Install requirements (alpine)
        run: apk --no-cache add ca-certificates curl clang-extra-tools npm python3
        shell: sh
        if: startsWith(matrix.container, 'alpine')
      - uses: taiki-e/checkout-action@v1
      - uses: taiki-e/github-actions/install-rust@nightly
      - name: Install node 18
        run: |
          mkdir -p -- /node18
          node_version=18.20.6
          curl --proto '=https' --tlsv1.2 -fsSL --retry 10 "https://unofficial-builds.nodejs.org/download/release/v${node_version}/node-v${node_version}-linux-x64-glibc-217.tar.xz" | tar xJf - --strip-components 1 -C /node18
          printf '/node18/bin\n' >>"${GITHUB_PATH}"
        if: (!startsWith(matrix.container, 'alpine'))
      - uses: taiki-e/install-action@shellcheck
      - uses: taiki-e/install-action@shfmt
      - uses: taiki-e/install-action@parse-dockerfile
      - run: tools/ci/tidy-show-deps.sh
      - run: tools/tidy.sh
  test-tidy-bsd:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: freebsd
            version: '13.4'
          - os: freebsd
            version: '14.2'
          - os: netbsd
            version: '9.4'
          # TODO:
          # - os: netbsd
          #   version: '10.1'
          - os: openbsd
            version: '7.6'
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: taiki-e/checkout-action@v1
      - uses: cross-platform-actions/action@v0.27.0
        with:
          environment_variables: CARGO_INCREMENTAL CARGO_NET_RETRY CARGO_TERM_COLOR RUST_BACKTRACE RUST_TEST_THREADS RUSTDOCFLAGS RUSTFLAGS RUSTUP_MAX_RETRIES
          operating_system: ${{ matrix.os }}
          version: ${{ matrix.version }}
          shell: bash
          sync_files: runner-to-vm
          run: |
            set -CeEuxo pipefail
            case "$(uname -s)" in
              FreeBSD)
                sudo pkg install -y git jq npm python3 shfmt hs-ShellCheck llvm
                curl --proto '=https' --tlsv1.2 -fsSL --retry 10 https://sh.rustup.rs | sh -s -- -y --profile minimal --default-toolchain nightly --no-modify-path
                export PATH="${HOME}/.cargo/bin:${PATH}"
                curl --proto '=https' --tlsv1.2 -fsSL --retry 10 "https://github.com/taiki-e/parse-dockerfile/releases/latest/download/parse-dockerfile-x86_64-unknown-freebsd.tar.gz" | tar xzf - -C "$HOME/.cargo/bin"
                ;;
              NetBSD)
                sudo pkgin -y install mozilla-rootcerts-openssl git jq nodejs shfmt shellcheck clang
                sudo ln -s -- /usr/pkg/bin/python3.12 /usr/pkg/bin/python3
                curl --proto '=https' --tlsv1.2 -fsSL --retry 10 https://sh.rustup.rs | sh -s -- -y --profile minimal --default-toolchain nightly --no-modify-path
                export PATH="${HOME}/.cargo/bin:${PATH}"
                cargo install parse-dockerfile --debug
                ;;
              OpenBSD)
                # OpenBSD targets are tier 3 targets, so install Rust from package manager instead of rustup.
                sudo pkg_add git jq node python3 shfmt shellcheck rust rust-rustfmt clang-tools-extra
                export PATH="${HOME}/.cargo/bin:${PATH}"
                cargo install parse-dockerfile --debug
                ;;
            esac
            tools/ci/tidy-show-deps.sh
            tools/tidy.sh
  test-tidy-dragonfly:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: taiki-e/checkout-action@v1
      - uses: vmactions/dragonflybsd-vm@v1
        with:
          envs: CARGO_INCREMENTAL CARGO_NET_RETRY CARGO_TERM_COLOR RUST_BACKTRACE RUST_TEST_THREADS RUSTDOCFLAGS RUSTFLAGS RUSTUP_MAX_RETRIES
          usesh: true
          copyback: false
          run: |
            # DragonFly BSD sh's -E means -o emacs
            # shellcheck disable=SC3040
            set -Ceuxo pipefail
            pkg upgrade -y # needed to avoid Undefined symbol "uv_library_shutdown" error
            # DragonFly BSD targets are tier 3 targets, so install Rust from package manager instead of rustup.
            pkg install -y bash git jq npm python3 shfmt hs-ShellCheck rust llvm
            git config --global --add safe.directory "$(pwd)"
            # rustc installed from package manager is 1.74, parse-dockerfile needs 1.80.
            cargo install parse-dockerfile --debug --git https://github.com/taiki-e/parse-dockerfile.git --branch msrv-1.65
            tools/ci/tidy-show-deps.sh
            tools/tidy.sh
  test-tidy-omnios:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: taiki-e/checkout-action@v1
      - uses: vmactions/omnios-vm@v1
        with:
          envs: CARGO_INCREMENTAL CARGO_NET_RETRY CARGO_TERM_COLOR RUST_BACKTRACE RUST_TEST_THREADS RUSTDOCFLAGS RUSTFLAGS RUSTUP_MAX_RETRIES
          usesh: true
          copyback: false
          run: |
            # illumos sh has no -E
            # shellcheck disable=SC3040
            set -Ceuxo pipefail
            pkg install git gnu-tar jq node-20 python-312 clang-18
            curl --proto '=https' --tlsv1.2 -fsSL --retry 10 -o bootstrap.tar.gz https://pkgsrc.SmartOS.org/packages/SmartOS/bootstrap/bootstrap-2024Q4-x86_64.tar.gz
            tar xzpf bootstrap.tar.gz -C /
            export PATH="/opt/local/sbin:/opt/local/bin:${PATH}"
            pkgin -y install shfmt shellcheck
            curl --proto '=https' --tlsv1.2 -fsSL --retry 10 https://sh.rustup.rs | sh -s -- -y --profile minimal --default-toolchain nightly --no-modify-path
            export PATH="${HOME}/.cargo/bin:${PATH}"
            git config --global --add safe.directory "$(pwd)"
            # Use gtar instead of tar because "tar: directory checksum error" error
            curl --proto '=https' --tlsv1.2 -fsSL --retry 10 "https://github.com/taiki-e/parse-dockerfile/releases/latest/download/parse-dockerfile-x86_64-unknown-illumos.tar.gz" | gtar xzf - -C "$HOME/.cargo/bin"
            tools/ci/tidy-show-deps.sh
            tools/tidy.sh
  test-tidy-solaris:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: taiki-e/checkout-action@v1
      - uses: vmactions/solaris-vm@v1
        with:
          envs: CARGO_INCREMENTAL CARGO_NET_RETRY CARGO_TERM_COLOR RUST_BACKTRACE RUST_TEST_THREADS RUSTDOCFLAGS RUSTFLAGS RUSTUP_MAX_RETRIES
          usesh: true
          copyback: false
          run: |
            # Solaris sh has no -C/-E/-o pipefail
            set -eux
            g() {
              set +x
              ifs="${IFS}"
              IFS=' '
              cmd="$*"
              IFS="${ifs}"
              printf '::group::%s\n' "${cmd#retry }"
              "$@"
              printf '::endgroup::\n'
              set -x
            }
            g egrep 'AV_|AV2_' /usr/include/sys/auxv_SPARC.h
            g ld -z help
            # rustup doesn't support host tools on Solaris. https://github.com/rust-lang/rustup/issues/2987
            # library/gmp and library/libffi are for haskell.
            g pkg install git jq pkg://solaris/runtime/python-37 clang gnu-make developer/rust/cargo developer/rust/rustc library/gmp library/libffi
            # haskell and shellcheck are not available via pkg install.
            # Refs: https://shakemid.hatenablog.com/entry/20161220/1482248944
            curl --proto '=https' --tlsv1.2 -fsSL --retry 10 https://downloads.haskell.org/ghc/7.10.2/ghc-7.10.2-x86_64-unknown-solaris2.11.tar.bz2 | gtar xjf -
            # curl --proto '=https' --tlsv1.2 -fsSL --retry 10 https://downloads.haskell.org/ghc/8.0.1/ghc-8.0.1-x86_64-unknown-solaris2.11.tar.xz | gtar xJf -
            (cd -- ghc-* && PATH="/usr/gnu/bin:${PATH}" ./configure --prefix=/opt/ghc && PATH="/usr/gnu/bin:${PATH}" gmake install)
            rm -rf -- ghc-*
            /opt/ghc/bin/ghc -V
            export PATH="/opt/ghc/bin:${PATH}"
            curl --proto '=https' --tlsv1.2 -fsSL --retry 10 https://downloads.haskell.org/cabal/cabal-install-1.22.9.0/cabal-install-1.22.9.0.tar.gz | gtar xzf -
            # curl --proto '=https' --tlsv1.2 -fsSL --retry 10 https://downloads.haskell.org/cabal/cabal-install-1.24.0.2/cabal-install-1.24.0.2.tar.gz | gtar xzf -
            # Workaround for "ld: fatal: unrecognized option --build-id=none" error.
            cat >/tmp/ld <<'EOF'
            #!/usr/bin/env bash
            args=()
            # z=''
            for arg in "$@"; do
              case "${arg}" in
                --build-id=none) ;;
                # -z) z='1' ;;
                # ignore)
                #   if [[ -n "${z}" ]]; then
                #     args+=(--as-needed)
                #     z=''
                #   else
                #     args+=("${arg}")
                #   fi
                #   ;;
                # record)
                #   if [[ -n "${z}" ]]; then
                #     args+=(--no-as-needed)
                #     z=''
                #   else
                #     args+=("${arg}")
                #   fi
                #   ;;
                *)
                  # if [[ -n "${z}" ]]; then
                  #   args+=(-z "${arg}")
                  #   z=''
                  # else
                  args+=("${arg}")
                  # fi
                  ;;
              esac
            done
            # if ! /usr/gnu/bin/ld "${args[@]}"; then
            #   echo "/usr/gnu/bin/ld $*"
            #   exit 1
            # fi
            if ! ld "${args[@]}"; then
              echo "ld $*"
              exit 1
            fi
            EOF
            chmod +x /tmp/ld
            (cd -- cabal-install* && gsed -Ei 's/\.\/Setup build /LD_ALTEXEC=\/tmp\/ld .\/Setup build /' ./bootstrap.sh && bash -o posix -c 'LD_ALTEXEC=/usr/gnu/bin/ld ./bootstrap.sh')
            # (cd -- cabal-install* && bash -o posix -c 'LD_ALTEXEC=/usr/gnu/bin/ld CC=gcc ./bootstrap.sh')
            rm -rf -- cabal-install*
            export PATH="${HOME}/.cabal/bin:${PATH}"
            cabal update
            cabal install shellcheck
            # developer/golang from pkg install is too old (1.7) to build shfmt.
            go_bootstrap=go1.4.3
            # last version that can be built with one bootstrap: https://go.dev/doc/install/source
            go=go1.19.13
            printf '::group::install %s\n' "${go}"
            mkdir -p -- "${HOME}/go/${go_bootstrap}" "${HOME}/go/${go}"
            curl --proto '=https' --tlsv1.2 -fsSL --retry 10 "https://go.dev/dl/${go_bootstrap}.src.tar.gz" | gtar xzf - --strip-components 1 -C "${HOME}/go/${go_bootstrap}"
            curl --proto '=https' --tlsv1.2 -fsSL --retry 10 "https://go.dev/dl/${go}.src.tar.gz" | gtar xzf - --strip-components 1 -C "${HOME}/go/${go}"
            (cd -- "${HOME}/go/${go_bootstrap}"/src && PATH="/usr/gnu/bin:${PATH}" ./make.bash --no-banner)
            "${HOME}/go/${go_bootstrap}"/bin/go version
            (cd -- "${HOME}/go/${go}"/src && PATH="/usr/gnu/bin:${PATH}" GOROOT_BOOTSTRAP="${HOME}/go/${go_bootstrap}" ./make.bash --no-banner)
            rm -rf -- "${HOME}/go/${go_bootstrap}"
            export PATH="${HOME}/go/${go}/bin:${PATH}"
            go version
            export GOPATH="${HOME}/go"
            export PATH="${GOPATH}/bin:${PATH}"
            printf '::endgroup::\n'
            # Use 3.7 because 3.8 dropped support for Go 1.19 and 1.20.
            g go install mvdan.cc/sh/v3/cmd/shfmt@v3.7.0
            g pkg uninstall gnu-make
            # runtime/nodejs from pkg install is node 16.
            mkdir -p -- /node18
            node_version=18.20.6
            curl --proto '=https' --tlsv1.2 -fsSL --retry 10 "https://github.com/taiki-e/node/releases/download/v${node_version}%2Bsolaris/node-solaris-x64.tar.gz" | gtar xzf - --strip-components 1 -C /node18
            export PATH="/node18/bin:${PATH}"
            # rustc installed from package manager is 1.53, parse-dockerfile needs 1.80.
            # cargo install parse-dockerfile --debug
            curl --proto '=https' --tlsv1.2 -fsSL --retry 10 "https://github.com/taiki-e/parse-dockerfile/releases/latest/download/parse-dockerfile-x86_64-unknown-illumos.tar.gz" | tar xzf - -C "$HOME/.cargo/bin"
            tools/ci/tidy-show-deps.sh
            tools/tidy.sh
