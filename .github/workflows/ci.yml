name: CI

on:
  pull_request:
  push:
    branches:
      - main
      - staging
      - v[0-9]+.[0-9]+
  schedule:
    - cron: "0 1 * * *"

env:
  CARGO_INCREMENTAL: 0
  CARGO_TERM_COLOR: always
  RUSTFLAGS: -D warnings
  RUST_BACKTRACE: 1

defaults:
  run:
    shell: bash

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest
          - target: x86_64-pc-windows-gnu
            rust: nightly-x86_64-gnu
            os: windows-latest
          - target: x86_64-unknown-linux-musl
    runs-on: ${{ matrix.os || 'ubuntu-latest' }}
    steps:
      - uses: actions/checkout@v2
      - uses: taiki-e/github-actions/install-rust@main
        with:
          toolchain: ${{ matrix.rust }}
      - run: cargo test --all
      - run: scripts/install.sh
        env:
          PACKAGE: rust-test-bin
          REPOSITORY: taiki-e/test
          TARGET: ${{ matrix.target }}
      - run: rust-test-bin
      # - run: scripts/install.sh
      #   env:
      #     PACKAGE: cargo-hack
      #     TARGET: ${{ matrix.target }}
      #   if: matrix.target != 'x86_64-pc-windows-gnu'
      # - run: cargo hack build --all
      #   if: matrix.target != 'x86_64-pc-windows-gnu'

  # install-component:
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os:
  #         - ubuntu-latest
  #         - macos-latest
  #         - windows-latest
  #       rust:
  #         - stable
  #         - nightly
  #   runs-on: ${{ matrix.os }}
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: taiki-e/github-actions/install-rust@main
  #       with:
  #         toolchain: ${{ matrix.rust }}
  #         component: clippy,rustfmt
  #     - run: cargo clippy --all --all-features --all-targets
  #     - run: scripts/rustfmt.sh

  # rustdoc:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: taiki-e/github-actions/install-rust@main
  #     - run: cargo doc --no-deps --all --all-features
  #       env:
  #         RUSTDOCFLAGS: -D warnings
  #     - uses: taiki-e/github-actions/deploy-gh-pages@main
  #       with:
  #         deploy_dir: target/doc
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       if: github.event_name == 'push' && github.event.ref == 'refs/heads/main' && github.repository_owner == 'taiki-e'

  shellcheck:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: shellcheck **/*.sh

  shfmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install shfmt
        run: ci/install-shfmt.sh
      - run: scripts/shfmt.sh

  # This job doesn't actually test anything, but they're used to tell bors the
  # build completed, as there is no practical way to detect when a workflow is
  # successful listening to webhooks only.
  #
  # ALL THE PREVIOUS JOBS NEEDS TO BE ADDED TO THE `needs` SECTION OF THIS JOB!

  ci-success:
    name: ci
    if: github.event_name == 'push' && success()
    needs:
      - test
      # - install-component
      # - rustdoc
      - shellcheck
      - shfmt
    runs-on: ubuntu-latest
    steps:
      - name: Mark the job as a success
        run: exit 0

  schedule-failure:
    name: ci
    if: github.event_name == 'schedule' && !success()
    needs:
      - test
      # - install-component
      # - rustdoc
      - shellcheck
      - shfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: JasonEtco/create-an-issue@v2
        with:
          filename: .github/cron-job-failure.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
