name: CI

permissions:
  contents: read

on:
  pull_request:
  push:
    branches:
      - main
      - dev
      - v[0-9]+.[0-9]+
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_GIT_FETCH_WITH_CLI: true
  CARGO_NET_RETRY: 10
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUSTDOCFLAGS: -D warnings
  RUSTFLAGS: -D warnings
  RUSTUP_MAX_RETRIES: 10

defaults:
  run:
    shell: bash --noprofile --norc -CeEuxo pipefail {0}

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
  tidy:
    uses: taiki-e/github-actions/.github/workflows/tidy.yml@main

  test:
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest
          # - target: x86_64-pc-windows-gnu
          #   rust: nightly-x86_64-gnu
          #   os: windows-latest
          # - target: x86_64-unknown-linux-musl
    runs-on: ${{ matrix.os || 'ubuntu-latest' }}
    timeout-minutes: 60
    steps:
      - uses: taiki-e/checkout-action@v1
      - name: Install Rust
        run: rustup toolchain add "${{ matrix.rust || 'nightly' }}" --no-self-update && rustup default "${{ matrix.rust || 'nightly' }}"
      - run: make test

  test-tidy:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-20.04
          - os: ubuntu-22.04
          - os: ubuntu-24.04
          - os: macos-12
          - os: macos-13
          - os: macos-14
          # Error: [WinError 2] The system cannot find the file specified
          # tools/tidy.sh: error on line 89: "python${py_suffix}" -m venv .venv
          # - os: windows-2019
          - os: windows-2022
          - os: windows-2022
            bash: msys64
          - os: windows-2022
            bash: cygwin
    runs-on: ${{ matrix.os }}
    steps:
      - uses: taiki-e/checkout-action@v1
      - run: brew install clang-format
        if: startsWith(matrix.os, 'macos')
      - name: Install Rust
        run: rustup toolchain add nightly --no-self-update && rustup default nightly
      - uses: taiki-e/install-action@shellcheck
      - uses: taiki-e/install-action@shfmt
      - run: |
          printf "C:\msys64\mingw32\bin\n" >>"${GITHUB_PATH}"
          printf "C:\msys64\usr\bin\n" >>"${GITHUB_PATH}"
        if: matrix.bash == 'msys64'
      - run: |
          choco install --no-progress --requirechecksums cygwin
          printf "C:\tools\cygwin\bin\n" >>"${GITHUB_PATH}"
          printf "C:\tools\cygwin\usr\bin\n" >>"${GITHUB_PATH}"
        if: matrix.bash == 'cygwin'
      - run: tools/ci/tidy-show-deps.sh
      - run: tools/tidy.sh
      - run: brew install bash
        if: startsWith(matrix.os, 'macos')
      - run: tools/ci/tidy-show-deps.sh
        if: startsWith(matrix.os, 'macos')
      - run: tools/tidy.sh
        if: startsWith(matrix.os, 'macos')
  test-tidy-container:
    strategy:
      fail-fast: false
      matrix:
        container:
          - ubuntu:18.04 # glibc 2.27
          - ubuntu:20.04 # glibc 2.31
          - ubuntu:22.04 # glibc 2.35
          - ubuntu:24.04 # glibc 2.39
          - debian:10-slim # glibc 2.28
          - debian:11-slim # glibc 2.31
          - debian:12-slim # glibc 2.36
          - fedora:latest # glibc 2.38 (as of fedora 39)
          - almalinux:8 # glibc 2.28
          - almalinux:8-minimal # glibc 2.28
          - almalinux:9 # glibc 2.34
          - almalinux:9-minimal # glibc 2.34
          - centos:7 # glibc 2.17
          - alpine:latest # musl 1.2.4 (as of alpine 3.19)
    runs-on: ubuntu-latest
    timeout-minutes: 60
    container: ${{ matrix.container }}
    steps:
      - name: Install requirements (ubuntu/debian)
        run: |
          apt-get -o Acquire::Retries=10 -qq update
          apt-get -o Acquire::Retries=10 -o Dpkg::Use-Pty=0 install -y --no-install-recommends ca-certificates curl xz-utils clang-format python3-venv
        if: contains(matrix.container, 'ubuntu') || contains(matrix.container, 'debian')
      - name: Install requirements (fedora/almalinux/centos)
        run: |
          if type -P dnf &>/dev/null; then
            dnf install -y clang-tools-extra python3
          elif type -P microdnf &>/dev/null; then
            microdnf install -y tar xz clang-tools-extra python3
          else
            # https://github.com/rust-lang/rust/pull/126352
            sed -i /etc/yum.repos.d/*.repo -e 's!^mirrorlist!#mirrorlist!' \
              -e 's!^#baseurl=http://mirror.centos.org/!baseurl=https://vault.centos.org/!'
            sed -i 's/enabled=1/enabled=0/' /etc/yum/pluginconf.d/fastestmirror.conf
            yum install -y xz clang python3
          fi
        if: contains(matrix.container, 'fedora') || contains(matrix.container, 'almalinux') || contains(matrix.container, 'centos')
      - name: Install requirements (alpine)
        run: apk --no-cache add bash ca-certificates curl clang-extra-tools npm python3
        shell: sh
        if: contains(matrix.container, 'alpine')
      - name: Install jq 1.6
        # ubuntu 18.04 and debian 10's jq is 1.5
        # jq: error (at <stdin>:44): Invalid path expression near attempt to access element 0 of [0]
        # tools/tidy.sh: error on line 408: jq 'del(.dictionaryDefinitions[] | select(.name == "organization-dictionary" | not))'
        run: |
          curl --proto '=https' --tlsv1.2 -fsSL --retry 10 -o /usr/local/bin/jq https://github.com/jqlang/jq/releases/download/jq-1.6/jq-linux64
          chmod +x /usr/local/bin/jq
        if: contains(matrix.container, 'ubuntu:18.04') || contains(matrix.container, 'debian:10')
      - uses: taiki-e/checkout-action@v1
      - name: Install Rust
        run: |
          curl --proto '=https' --tlsv1.2 -fsSL --retry 10 https://sh.rustup.rs | sh -s -- -y --profile minimal --default-toolchain nightly --no-modify-path
          echo "${HOME}/.cargo/bin" >>"${GITHUB_PATH}"
      - name: Install node 18
        run: |
          mkdir -p /node18
          curl --proto '=https' --tlsv1.2 -fsSL --retry 10 https://unofficial-builds.nodejs.org/download/release/v18.20.3/node-v18.20.3-linux-x64-glibc-217.tar.xz | tar xJf - --strip-components 1 -C /node18
          echo "/node18/bin" >>"${GITHUB_PATH}"
        if: (!contains(matrix.container, 'alpine'))
      - uses: taiki-e/install-action@shellcheck
      - uses: taiki-e/install-action@shfmt
      - run: tools/ci/tidy-show-deps.sh
      - run: tools/tidy.sh
  test-tidy-bsd:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: freebsd
            version: '13.3'
          - os: freebsd
            version: '14.1'
          - os: netbsd
            version: '9.4'
          - os: netbsd
            version: '10.0'
          - os: openbsd
            version: '7.5'
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: taiki-e/checkout-action@v1
      - uses: taiki-e/cross-platform-actions-action@master
        with:
          environment_variables: CARGO_INCREMENTAL CARGO_NET_RETRY CARGO_TERM_COLOR RUST_BACKTRACE RUST_TEST_THREADS RUSTDOCFLAGS RUSTFLAGS RUSTUP_MAX_RETRIES
          operating_system: ${{ matrix.os }}
          version: ${{ matrix.version }}
          shell: bash
          sync_files: runner-to-vm
          run: |
            set -CeEuxo pipefail
            case "$(uname -s)" in
              FreeBSD) sudo pkg install -y git jq npm python3 shfmt hs-ShellCheck llvm ;;
              NetBSD) sudo pkgin -y install mozilla-rootcerts-openssl git jq nodejs shfmt shellcheck clang ;;
              # OpenBSD targets are tier 3 targets, so install Rust from package manager instead of rustup.
              OpenBSD) sudo pkg_add git jq node python3 shfmt shellcheck rust rust-rustfmt clang-tools-extra ;;
            esac
            case "$(uname -s)" in
              FreeBSD | NetBSD)
                curl --proto '=https' --tlsv1.2 -fsSL --retry 10 https://sh.rustup.rs | sh -s -- -y --profile minimal --default-toolchain nightly --no-modify-path
                export PATH="${HOME}/.cargo/bin:${PATH}"
                ;;
            esac
            tools/ci/tidy-show-deps.sh
            tools/tidy.sh
  test-tidy-dragonfly:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: taiki-e/checkout-action@v1
      - uses: vmactions/dragonflybsd-vm@v1
        with:
          envs: CARGO_INCREMENTAL CARGO_NET_RETRY CARGO_TERM_COLOR RUST_BACKTRACE RUST_TEST_THREADS RUSTDOCFLAGS RUSTFLAGS RUSTUP_MAX_RETRIES
          usesh: true
          copyback: false
          prepare: |
            # DragonFly BSD sh's -E means -o emacs
            # shellcheck disable=SC3040
            set -Ceuxo pipefail
            pkg upgrade -y # needed to avoid Undefined symbol "uv_library_shutdown" error
            # DragonFly BSD targets are tier 3 targets, so install Rust from package manager instead of rustup.
            pkg install -y bash git jq npm python3 shfmt hs-ShellCheck rust llvm
            git config --global --add safe.directory "$(pwd)"
            chsh -s /usr/local/bin/bash
          run: |
            set -CeEuxo pipefail
            tools/ci/tidy-show-deps.sh
            tools/tidy.sh
  test-tidy-omnios:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: taiki-e/checkout-action@v1
      - uses: vmactions/omnios-vm@v1
        with:
          envs: CARGO_INCREMENTAL CARGO_NET_RETRY CARGO_TERM_COLOR RUST_BACKTRACE RUST_TEST_THREADS RUSTDOCFLAGS RUSTFLAGS RUSTUP_MAX_RETRIES
          usesh: true
          copyback: false
          prepare: |
            # illumos sh has no -E
            # shellcheck disable=SC3040
            set -Ceuxo pipefail
            pkg install bash git jq node-20 python-312 clang-18
            curl --proto '=https' --tlsv1.2 -fsSL --retry 10 -o bootstrap.tar.gz https://pkgsrc.SmartOS.org/packages/SmartOS/bootstrap/bootstrap-2023Q4-x86_64.tar.gz
            tar xzpf bootstrap.tar.gz -C /
            export PATH="/opt/local/sbin:/opt/local/bin:${PATH}"
            pkgin -y install shfmt shellcheck
            curl --proto '=https' --tlsv1.2 -fsSL --retry 10 https://sh.rustup.rs | sh -s -- -y --profile minimal --default-toolchain nightly --no-modify-path
            export PATH="${HOME}/.cargo/bin:${PATH}"
            git config --global --add safe.directory "$(pwd)"
            chsh -s /usr/bin/bash
          run: |
            set -CeEuxo pipefail
            tools/ci/tidy-show-deps.sh
            tools/tidy.sh
  test-tidy-solaris:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: taiki-e/checkout-action@v1
      - uses: vmactions/solaris-vm@v1
        with:
          envs: CARGO_INCREMENTAL CARGO_NET_RETRY CARGO_TERM_COLOR RUST_BACKTRACE RUST_TEST_THREADS RUSTDOCFLAGS RUSTFLAGS RUSTUP_MAX_RETRIES
          usesh: true
          copyback: false
          prepare: |
            # Solaris sh has no -C/-E/-o pipefail
            set -eux
            pkg install bash tree git jq pkg://solaris/runtime/python-35 clang gnu-binutils gnu-make gcc-48
            # TODO: nodejs shellcheck rustc cargo
            # rustup doesn't support host tools on Solaris. https://github.com/rust-lang/rustup/issues/2987
            # cargo from pkg install fails due to dependency resolution error.
            # nodejs from pkg install is node 16.
            # pkg://solaris/developer/golang from pkg install is too old (1.7) to build shfmt.
            go_bootstrap=go1.4.3
            # last version that can be built with one bootstrap: https://go.dev/doc/install/source
            go=go1.19.13
            mkdir -p "${HOME}/go/${go_bootstrap}" "${HOME}/go/${go}"
            curl --proto '=https' --tlsv1.2 -fsSL --retry 10 "https://go.dev/dl/${go_bootstrap}.src.tar.gz" | gtar xzf - --strip-components 1 -C "${HOME}/go/${go_bootstrap}"
            curl --proto '=https' --tlsv1.2 -fsSL --retry 10 "https://go.dev/dl/${go}.src.tar.gz" | gtar xzf - --strip-components 1 -C "${HOME}/go/${go}"
            (cd "${HOME}/go/${go_bootstrap}"/src && PATH="/usr/gnu/bin:${PATH}" ./make.bash --no-banner)
            "${HOME}/go/${go_bootstrap}/bin/go" version
            (cd "${HOME}/go/${go}"/src && PATH="/usr/gnu/bin:${PATH}" GOROOT_BOOTSTRAP="${HOME}/go/${go_bootstrap}" ./make.bash --no-banner)
            rm -rf "${HOME}/go/${go_bootstrap}"
            export PATH="${HOME}/go/${go}/bin:${PATH}"
            go version
            export GOPATH="${HOME}/go"
            export PATH="${GOPATH}/bin:${PATH}"
            # 3.8 dropped support for Go 1.19 and 1.20.
            go install mvdan.cc/sh/v3/cmd/shfmt@v3.7.0
            # TODO: CA issue probably due to https://github.com/vmactions/solaris-vm/issues/38.
            #       Workaround from https://stackoverflow.com/questions/25981703/pip-install-fails-with-connection-error-ssl-certificate-verify-failed-certi.
            echo '[global]' >>/etc/pip.conf
            echo 'trusted-host = pypi.python.org' >>/etc/pip.conf
            echo '               pypi.org' >>/etc/pip.conf
            echo '               files.pythonhosted.org' >>/etc/pip.conf
            chsh -s /usr/bin/bash
          run: |
            set -CeEuxo pipefail
            tools/ci/tidy-show-deps.sh
            tools/tidy.sh

  codegen:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: taiki-e/checkout-action@v1
      - name: Install Rust
        run: rustup toolchain add nightly --no-self-update && rustup default nightly
      - run: make gen
      - id: diff
        run: tools/ci/gen.sh
        if: github.repository_owner == 'taiki-e' && (github.event_name == 'schedule' || github.event_name == 'push' && github.ref == 'refs/heads/main')
      - uses: peter-evans/create-pull-request@v6
        with:
          title: Update generated code
          body: |
            Auto-generated by [create-pull-request][1]
            [Please close and immediately reopen this pull request to run CI.][2]

            [1]: https://github.com/peter-evans/create-pull-request
            [2]: https://github.com/peter-evans/create-pull-request/blob/HEAD/docs/concepts-guidelines.md#workarounds-to-trigger-further-workflow-runs
          branch: gen
        if: github.repository_owner == 'taiki-e' && (github.event_name == 'schedule' || github.event_name == 'push' && github.ref == 'refs/heads/main') && steps.diff.outputs.success == 'false'
      - run: git add -N . && git diff --exit-code
