name: CI

permissions:
  contents: read

on:
  pull_request:
  push:
    branches:
      - main
      - staging
      - v[0-9]+.[0-9]+
  schedule:
    - cron: '40 1 * * *'

env:
  CARGO_INCREMENTAL: 0
  CARGO_TERM_COLOR: always
  RUSTFLAGS: -D warnings
  RUST_BACKTRACE: 1

defaults:
  run:
    shell: bash

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest
          # - target: x86_64-pc-windows-gnu
          #   rust: nightly-x86_64-gnu
          #   os: windows-latest
          # - target: x86_64-unknown-linux-musl
    runs-on: ${{ matrix.os || 'ubuntu-latest' }}
    steps:
      - uses: actions/checkout@v2
        with:
          persist-credentials: false
      - uses: taiki-e/github-actions/install-rust@main
        with:
          toolchain: ${{ matrix.rust }}
      - run: make test
      # - run: tools/install.sh
      #   env:
      #     PACKAGE: rust-test-bin
      #     REPOSITORY: taiki-e/test
      #     TARGET: ${{ matrix.target }}
      # - run: rust-test-bin
      # - run: tools/install.sh
      #   env:
      #     PACKAGE: cargo-hack
      #     TARGET: ${{ matrix.target }}
      #   if: matrix.target != 'x86_64-pc-windows-gnu'
      # - run: cargo hack build --all
      #   if: matrix.target != 'x86_64-pc-windows-gnu'

  # install-component:
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os:
  #         - ubuntu-latest
  #         - macos-latest
  #         - windows-latest
  #       rust:
  #         - stable
  #         - nightly
  #   runs-on: ${{ matrix.os }}
  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         persist-credentials: false
  #     - uses: taiki-e/github-actions/install-rust@main
  #       with:
  #         toolchain: ${{ matrix.rust }}
  #         component: clippy,rustfmt
  #     - run: cargo clippy --all --all-features --all-targets
  #     - run: tools/rustfmt.sh

  # docs:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         persist-credentials: false
  #     - uses: taiki-e/github-actions/install-rust@main
  #     - run: cargo doc --no-deps --all --all-features
  #       env:
  #         RUSTDOCFLAGS: -D warnings
  #     - uses: taiki-e/github-actions/deploy-gh-pages@main
  #       with:
  #         deploy_dir: target/doc
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       if: github.event_name == 'push' && github.event.ref == 'refs/heads/main' && github.repository_owner == 'taiki-e'

  codegen:
    runs-on: ubuntu-latest
    permissions:
      contents: write # TODO test
      pull-requests: write
    steps:
      - uses: actions/checkout@v2
        with:
          persist-credentials: false
      - uses: taiki-e/github-actions/install-rust@main
      - run: make gen
      - run: git add -N . && git diff --exit-code
        if: github.event_name != 'schedule'
      - id: diff
        run: ci/gen.sh
        if: github.event_name == 'schedule'
      - uses: peter-evans/create-pull-request@v3
        with:
          title: Update generated code
          body: ''
          branch: gen
        if: github.event_name == 'schedule' && steps.diff.outputs.success == 'false'

  fmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          persist-credentials: false
      - uses: taiki-e/github-actions/install-rust@main
        with:
          component: rustfmt
      - name: Install prettier
        run: sudo npm install -g prettier
      - name: Install shfmt
        run: ci/install-shfmt.sh
      - run: make fmt

  shellcheck:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          persist-credentials: false
      - run: shellcheck **/*.sh

  glibc:
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-18.04
          - ubuntu-20.04
          - ubuntu-latest
    runs-on: ${{ matrix.os }}
    steps:
      - run: /lib/x86_64-linux-gnu/libc.so.6

  # This job doesn't actually test anything, but they're used to tell bors the
  # build completed, as there is no practical way to detect when a workflow is
  # successful listening to webhooks only.
  #
  # ALL THE PREVIOUS JOBS NEEDS TO BE ADDED TO THE `needs` SECTION OF THIS JOB!

  ci-success:
    name: ci
    if: github.event_name == 'push' && success()
    needs:
      - test
      # - install-component
      # - docs
      - codegen
      - fmt
      - shellcheck
    runs-on: ubuntu-latest
    steps:
      - name: Mark the job as a success
        run: exit 0

  # cron-job-failure:
  #   if: github.event_name == 'schedule' && !success()
  #   needs:
  #     - test
  #     # - install-component
  #     # - docs
  #     - codegen
  #     - fmt
  #     - shellcheck
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         persist-credentials: false
  #     - id: issue_check
  #       run: |
  #         title="Cron Job Failed"
  #         issue_number=$(
  #             curl -LsSf "https://api.github.com/repos/${GITHUB_REPOSITORY}/issues" \
  #                 | jq "map(select(.title == \"${title}\" and .user.login == \"github-actions[bot]\")) | .[0].number"
  #         )
  #         if [[ "${issue_number}" == "null" ]]; then
  #             echo "::set-output name=exists::false"
  #         fi
  #     - uses: JasonEtco/create-an-issue@v2
  #       with:
  #         filename: .github/cron-job-failure.md
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       if: steps.issue_check.outputs.exists == 'false'

  # https://github.com/rust-lang/rust/blob/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src/librustc_target/spec/mod.rs#L330-L479
  # target:
  #   name: ${{ matrix.target }}
  #   strategy:
  #     # fail-fast: false
  #     matrix:
  #       include:
  #         # Tier1: https://doc.rust-lang.org/nightly/rustc/platform-support.html#tier-1
  #         - target: aarch64-unknown-linux-gnu
  #           # apt: gcc-aarch64-linux-gnu
  #         - target: i686-pc-windows-gnu
  #           rust: nightly-x86_64-gnu
  #           os: windows-latest
  #           # TODO: error: linker `i686-w64-mingw32-gcc` not found
  #           bin-fail: true
  #         - target: i686-pc-windows-msvc
  #           os: windows-latest
  #         - target: i686-unknown-linux-gnu
  #         - target: x86_64-apple-darwin
  #           os: macos-latest
  #         - target: x86_64-pc-windows-gnu
  #           rust: nightly-x86_64-gnu
  #           os: windows-latest
  #         - target: x86_64-pc-windows-msvc
  #           os: windows-latest
  #         - target: x86_64-unknown-linux-gnu

  #         # Tier2: https://doc.rust-lang.org/nightly/rustc/platform-support.html#tier-2
  #         - target: aarch64-apple-darwin
  #           os: macos-latest
  #           # TODO: error: linking with `cc` failed
  #           bin-fail: true
  #         - target: aarch64-apple-ios
  #           os: macos-latest
  #         - target: aarch64-fuchsia
  #           # TODO: error: linking with `rust-lld` failed
  #           bin-fail: true
  #         - target: aarch64-linux-android
  #         - target: aarch64-pc-windows-msvc
  #           os: windows-latest
  #         - target: aarch64-unknown-linux-musl
  #         - target: aarch64-unknown-none
  #           no-std: true
  #         - target: aarch64-unknown-none-softfloat
  #           no-std: true
  #         - target: arm-linux-androideabi
  #         - target: arm-unknown-linux-gnueabi
  #         - target: arm-unknown-linux-gnueabihf
  #         - target: arm-unknown-linux-musleabi
  #         - target: arm-unknown-linux-musleabihf
  #         - target: armebv7r-none-eabi
  #           no-std: true
  #         - target: armebv7r-none-eabihf
  #           no-std: true
  #         - target: armv5te-unknown-linux-gnueabi
  #         - target: armv5te-unknown-linux-musleabi
  #         - target: armv7-linux-androideabi
  #         - target: armv7a-none-eabi
  #           no-std: true
  #         - target: armv7r-none-eabi
  #           no-std: true
  #         - target: armv7r-none-eabihf
  #           no-std: true
  #         - target: armv7-unknown-linux-gnueabi
  #           apt: gcc-arm-linux-gnueabi
  #         - target: armv7-unknown-linux-gnueabihf
  #         - target: armv7-unknown-linux-musleabi
  #           # TODO: error: linking with `cc` failed
  #           bin-fail: true
  #         - target: armv7-unknown-linux-musleabihf
  #         - target: asmjs-unknown-emscripten
  #           # TODO: error: linking with `emcc` failed
  #           bin-fail: true
  #         - target: i586-pc-windows-msvc
  #           os: windows-latest
  #         - target: i586-unknown-linux-gnu
  #         - target: i586-unknown-linux-musl
  #         - target: i686-linux-android
  #         - target: i686-unknown-freebsd
  #           # TODO: error: linking with `cc` failed
  #           bin-fail: true
  #           apt: binutils-i686-kfreebsd-gnu libxi-dev
  #         - target: i686-unknown-linux-musl
  #         - target: mips-unknown-linux-gnu
  #         - target: mips-unknown-linux-musl
  #         - target: mips64-unknown-linux-gnuabi64
  #         - target: mips64-unknown-linux-muslabi64
  #           # TODO: error: linking with `cc` failed
  #           bin-fail: true
  #         - target: mips64el-unknown-linux-gnuabi64
  #         - target: mips64el-unknown-linux-muslabi64
  #           # TODO: error: linking with `cc` failed
  #           bin-fail: true
  #         - target: mipsel-unknown-linux-gnu
  #         - target: mipsel-unknown-linux-musl
  #         - target: nvptx64-nvidia-cuda
  #           no-std: true
  #           # TODO: error[E0463]: can't find crate for `std`
  #           bin-fail: true
  #           # apt: gcc-offload-nvptx
  #         - target: powerpc-unknown-linux-gnu
  #         - target: powerpc64-unknown-linux-gnu
  #           apt: gcc-powerpc64-linux-gnu
  #         - target: powerpc64le-unknown-linux-gnu
  #         - target: riscv32i-unknown-none-elf
  #           no-std: true
  #         - target: riscv32imac-unknown-none-elf
  #           no-std: true
  #         - target: riscv32imc-unknown-none-elf
  #           no-std: true
  #         - target: riscv64gc-unknown-linux-gnu
  #         - target: riscv64gc-unknown-none-elf
  #           no-std: true
  #         - target: riscv64imac-unknown-none-elf
  #           no-std: true
  #         - target: s390x-unknown-linux-gnu
  #         - target: sparc64-unknown-linux-gnu
  #           apt: gcc-sparc64-linux-gnu
  #         - target: sparcv9-sun-solaris
  #         - target: thumbv6m-none-eabi
  #           no-std: true
  #         - target: thumbv7em-none-eabi
  #           no-std: true
  #         - target: thumbv7em-none-eabihf
  #           no-std: true
  #         - target: thumbv7m-none-eabi
  #           no-std: true
  #         - target: thumbv7neon-linux-androideabi
  #           # TODO: error: linking with `cc` failed
  #           bin-fail: true
  #         - target: thumbv7neon-unknown-linux-gnueabihf
  #           apt: gcc-arm-linux-gnueabihf
  #         - target: thumbv8m.base-none-eabi
  #           no-std: true
  #         - target: thumbv8m.main-none-eabi
  #           no-std: true
  #         - target: thumbv8m.main-none-eabihf
  #           no-std: true
  #         - target: wasm32-unknown-emscripten
  #           # TODO: error: linking with `cc` failed
  #           bin-fail: true
  #         - target: wasm32-unknown-unknown
  #         - target: wasm32-wasi
  #         - target: x86_64-apple-ios
  #           os: macos-latest
  #         - target: x86_64-fortanix-unknown-sgx
  #         - target: x86_64-fuchsia
  #           # TODO: error: linking with `rust-lld` failed
  #           bin-fail: true
  #         - target: x86_64-linux-android
  #         - target: x86_64-pc-solaris
  #           # TODO: error: linking with `cc` failed
  #           bin-fail: true
  #         - target: x86_64-unknown-freebsd
  #           # TODO: error: linking with `cc` failed
  #           bin-fail: true
  #           apt: binutils-x86-64-kfreebsd-gnu libxi-dev
  #         - target: x86_64-unknown-illumos
  #           # TODO: error: linking with `cc` failed
  #           bin-fail: true
  #         - target: x86_64-unknown-linux-gnux32
  #           # TODO: error: linking with `cc` failed
  #           bin-fail: true
  #           apt: gcc-multilib-x86-64-linux-gnux32
  #         - target: x86_64-unknown-linux-musl
  #         - target: x86_64-unknown-netbsd
  #         - target: x86_64-unknown-redox
  #           # TODO: error: linking with `cc` failed
  #           bin-fail: true

  #   runs-on: ${{ matrix.os || 'ubuntu-latest' }}
  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         persist-credentials: false
  #     - uses: taiki-e/github-actions/install-rust@main
  #       with:
  #         target: ${{ matrix.target }}

  #     - run: |
  #         sudo apt-get update
  #         sudo apt-get install ${{ matrix.apt }}
  #       if: matrix.apt != ''

  #     - run: |
  #         sudo apt-get install musl musl-dev musl-tools
  #       if: contains(matrix.target, 'musl')

  #     - run: ci/install-emscripten.sh
  #       if: endsWith(matrix.target, 'emscripten')

  #     - run: |
  #         sudo xcode-select -s "/Applications/Xcode_12.2.app"
  #         echo "DEVELOPER_DIR=/Applications/Xcode_12.2.app/Contents/Developer" >> $GITHUB_ENV
  #       if: contains(matrix.target, 'apple')

  #     - run: tools/target-test.sh ${{ matrix.target }}
  #       env:
  #         BUILD_BIN_FAIL: ${{ matrix.bin-fail }}
  #         BUILD_STD_FAIL: ${{ matrix.no-std }}
