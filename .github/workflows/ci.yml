name: CI

on:
  pull_request:
  push:
    branches:
      - main
      - staging
      - v[0-9]+.[0-9]+
  schedule:
    - cron: '40 1 * * *'

env:
  CARGO_INCREMENTAL: 0
  CARGO_TERM_COLOR: always
  RUSTFLAGS: -D warnings
  RUST_BACKTRACE: 1

defaults:
  run:
    shell: bash

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest
          # - target: x86_64-pc-windows-gnu
          #   rust: nightly-x86_64-gnu
          #   os: windows-latest
          # - target: x86_64-unknown-linux-musl
    runs-on: ${{ matrix.os || 'ubuntu-latest' }}
    steps:
      - uses: actions/checkout@v2
      - uses: taiki-e/github-actions/install-rust@main
        with:
          toolchain: ${{ matrix.rust }}
      - run: make test
      # - run: tools/install.sh
      #   env:
      #     PACKAGE: rust-test-bin
      #     REPOSITORY: taiki-e/test
      #     TARGET: ${{ matrix.target }}
      # - run: rust-test-bin
      # - run: tools/install.sh
      #   env:
      #     PACKAGE: cargo-hack
      #     TARGET: ${{ matrix.target }}
      #   if: matrix.target != 'x86_64-pc-windows-gnu'
      # - run: cargo hack build --all
      #   if: matrix.target != 'x86_64-pc-windows-gnu'

  # install-component:
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os:
  #         - ubuntu-latest
  #         - macos-latest
  #         - windows-latest
  #       rust:
  #         - stable
  #         - nightly
  #   runs-on: ${{ matrix.os }}
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: taiki-e/github-actions/install-rust@main
  #       with:
  #         toolchain: ${{ matrix.rust }}
  #         component: clippy,rustfmt
  #     - run: cargo clippy --all --all-features --all-targets
  #     - run: tools/rustfmt.sh

  # docs:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: taiki-e/github-actions/install-rust@main
  #     - run: cargo doc --no-deps --all --all-features
  #       env:
  #         RUSTDOCFLAGS: -D warnings
  #     - uses: taiki-e/github-actions/deploy-gh-pages@main
  #       with:
  #         deploy_dir: target/doc
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       if: github.event_name == 'push' && github.event.ref == 'refs/heads/main' && github.repository_owner == 'taiki-e'

  codegen:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: taiki-e/github-actions/install-rust@main
      - run: make gen
      # - run: git diff --exit-code
      #   if: github.event_name != 'schedule'
      - id: diff
        run: |
          git add -N .
          if ! git diff --exit-code; then
            echo "::set-output name=success::false"
          fi
      - uses: peter-evans/create-pull-request@v3
        with:
          commit-message: Update target-spec-json
          branch: target-spec-json
        if: steps.diff.outputs.success == 'false'

  fmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: taiki-e/github-actions/install-rust@main
        with:
          component: rustfmt
      - name: Install prettier
        run: sudo npm install -g prettier
      - name: Install shfmt
        run: ci/install-shfmt.sh
      - run: make fmt

  shellcheck:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: shellcheck **/*.sh

  glibc:
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-18.04
          - ubuntu-20.04
          - ubuntu-latest
    runs-on: ${{ matrix.os }}
    steps:
      - run: /lib/x86_64-linux-gnu/libc.so.6

  # This job doesn't actually test anything, but they're used to tell bors the
  # build completed, as there is no practical way to detect when a workflow is
  # successful listening to webhooks only.
  #
  # ALL THE PREVIOUS JOBS NEEDS TO BE ADDED TO THE `needs` SECTION OF THIS JOB!

  ci-success:
    name: ci
    if: github.event_name == 'push' && success()
    needs:
      - test
      # - install-component
      # - docs
      - codegen
      - fmt
      - shellcheck
    runs-on: ubuntu-latest
    steps:
      - name: Mark the job as a success
        run: exit 0

  # cron-job-failure:
  #   if: github.event_name == 'schedule' && !success()
  #   needs:
  #     - test
  #     # - install-component
  #     # - docs
  #     - codegen
  #     - fmt
  #     - shellcheck
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - id: issue_check
  #       run: |
  #         title="Cron Job Failed"
  #         issue_number=$(
  #             curl -LsSf "https://api.github.com/repos/${GITHUB_REPOSITORY}/issues" \
  #                 | jq "map(select(.title == \"${title}\" and .user.login == \"github-actions[bot]\")) | .[0].number"
  #         )
  #         if [[ "${issue_number}" == "null" ]]; then
  #             echo "::set-output name=exists::false"
  #         fi
  #     - uses: JasonEtco/create-an-issue@v2
  #       with:
  #         filename: .github/cron-job-failure.md
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       if: steps.issue_check.outputs.exists == 'false'
