name: CI

permissions:
  contents: read

on:
  pull_request:
  push:
    branches:
      - main
      - dev
      - staging
      - v[0-9]+.[0-9]+
  schedule:
    - cron: '40 1 * * *'
  workflow_dispatch:

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUSTDOCFLAGS: -D warnings
  RUSTFLAGS: -D warnings
  RUSTUP_MAX_RETRIES: 10

defaults:
  run:
    shell: bash

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest
          # - target: x86_64-pc-windows-gnu
          #   rust: nightly-x86_64-gnu
          #   os: windows-latest
          # - target: x86_64-unknown-linux-musl
    runs-on: ${{ matrix.os || 'ubuntu-latest' }}
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ matrix.rust || 'nightly' }}
      - run: make test
      # - run: tools/install.sh
      #   env:
      #     PACKAGE: rust-test-bin
      #     REPOSITORY: taiki-e/test
      #     TARGET: ${{ matrix.target }}
      # - run: rust-test-bin
      # - run: tools/install.sh
      #   env:
      #     PACKAGE: cargo-hack
      #     TARGET: ${{ matrix.target }}
      #   if: matrix.target != 'x86_64-pc-windows-gnu'
      # - run: cargo hack build --workspace
      #   if: matrix.target != 'x86_64-pc-windows-gnu'

  # docs:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         persist-credentials: false
  #     - uses: dtolnay/rust-toolchain@nightly
  #     - run: cargo doc --workspace --all-features --document-private-items
  #     - uses: taiki-e/github-actions/deploy-gh-pages@main
  #       with:
  #         deploy_dir: target/doc
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       if: github.event_name == 'push' && github.event.ref == 'refs/heads/main' && github.repository_owner == 'taiki-e'

  codegen:
    runs-on: ubuntu-latest
    permissions:
      contents: write # TODO test
      pull-requests: write
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - uses: dtolnay/rust-toolchain@nightly
      - run: make gen
      - run: git add -N . && git diff --exit-code
        if: github.repository_owner != 'taiki-e' || github.event_name != 'schedule' && !(github.event_name == 'push' && github.ref == 'refs/heads/main')
      - id: diff
        run: ci/gen.sh
        if: github.repository_owner == 'taiki-e' && (github.event_name == 'schedule' || github.event_name == 'push' && github.ref == 'refs/heads/main')
      - uses: peter-evans/create-pull-request@v4
        with:
          title: Update generated code
          body: |
            Auto-generated by [create-pull-request][1]
            [Please close and immediately reopen this pull request to run CI.][2]

            [1]: https://github.com/peter-evans/create-pull-request
            [2]: https://github.com/peter-evans/create-pull-request/blob/HEAD/docs/concepts-guidelines.md#workarounds-to-trigger-further-workflow-runs
          branch: gen
        if: github.repository_owner == 'taiki-e' && (github.event_name == 'schedule' || github.event_name == 'push' && github.ref == 'refs/heads/main') && steps.diff.outputs.success == 'false'

  tidy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
      - uses: dtolnay/rust-toolchain@nightly
        with:
          components: clippy,rustfmt
      - uses: taiki-e/install-action@shellcheck
      - uses: taiki-e/install-action@shfmt
      - run: npm install prettier
      - run: pip3 install yq
      # `cargo fmt` cannot recognize modules defined inside macros, so run
      # rustfmt directly.
      # Refs: https://github.com/rust-lang/rustfmt/issues/4078
      - run: rustfmt --check $(git ls-files '*.rs')
        if: always()
      - run: cargo clippy --workspace --all-features --all-targets
        if: always()
      - run: shfmt -d $(git ls-files '*.sh')
        if: always()
      - run: npx prettier -c $(git ls-files '*.yml')
        if: always()
      - run: shellcheck $(git ls-files '*.sh')
        if: always()
      - run: tools/check-workflow.sh
        if: always()

  # version:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: docker
  #       run: docker --version
  #     - name: glibc
  #       run: |
  #         set -x
  #         # https://hub.docker.com/_/ubuntu
  #         docker run --rm --init ubuntu:20.04 /lib/x86_64-linux-gnu/libc.so.6 # focal
  #         docker run --rm --init ubuntu:18.04 /lib/x86_64-linux-gnu/libc.so.6 # bionic
  #         docker run --rm --init ubuntu:16.04 /lib/x86_64-linux-gnu/libc.so.6 # xenial
  #         docker run --rm --init ubuntu:14.04 /lib/x86_64-linux-gnu/libc.so.6 # trusty
  #         # https://hub.docker.com/_/debian
  #         docker run --rm --init debian:11 /lib/x86_64-linux-gnu/libc.so.6 # bullseye
  #         docker run --rm --init debian:10 /lib/x86_64-linux-gnu/libc.so.6 # buster
  #         docker run --rm --init debian:9 /lib/x86_64-linux-gnu/libc.so.6  # stretch
  #         # https://hub.docker.com/_/centos
  #         docker run --rm --init centos:8 rpm -q glibc
  #         docker run --rm --init centos:7 rpm -q glibc
  #         docker run --rm --init centos:6 rpm -q glibc

  # ALL THE PREVIOUS JOBS NEEDS TO BE ADDED TO THE `needs` SECTION OF THIS JOB!

  ci-success:
    name: ci
    if: github.event_name == 'push' && success()
    needs: [test, codegen, tidy] # tidy:needs
    runs-on: ubuntu-latest
    steps:
      - name: Mark the job as a success
        run: exit 0

  # cron-job-failure:
  #   if: github.event_name == 'schedule' && !success()
  #   needs:
  #     - test
  #     # - install-component
  #     # - docs
  #     - codegen
  #     - fmt
  #     - shellcheck
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #       with:
  #         persist-credentials: false
  #     - id: issue_check
  #       run: |
  #         title="Cron Job Failed"
  #         issue_number=$(
  #             curl -fsSL --retry 10 --retry-connrefused "https://api.github.com/repos/${GITHUB_REPOSITORY}/issues" \
  #                 | jq "map(select(.title == \"${title}\" and .user.login == \"github-actions[bot]\")) | .[0].number"
  #         )
  #         if [[ "${issue_number}" == "null" ]]; then
  #             echo "::set-output name=exists::false"
  #         fi
  #     - uses: JasonEtco/create-an-issue@v2
  #       with:
  #         filename: .github/cron-job-failure.md
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       if: steps.issue_check.outputs.exists == 'false'
