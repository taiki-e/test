name: Target

on:
  push:
    branches:
      - main
      - staging
      - target
    paths:
      - .cargo/config.toml
      - .github/workflows/target.yml
      - scripts/target-test.sh
      - ci/*.sh
  schedule:
    - cron: "0 2 * * 1,3,5"

env:
  CARGO_INCREMENTAL: 0
  CARGO_TERM_COLOR: always
  RUSTFLAGS: -D warnings
  RUST_BACKTRACE: 1

defaults:
  run:
    shell: bash

jobs:
  # https://github.com/rust-lang/rust/blob/0324a2b309cd66cb7bd4a156bd0b84cb136e254f/src/librustc_target/spec/mod.rs#L330-L479
  target:
    name: ${{ matrix.target }}
    strategy:
      # fail-fast: false
      matrix:
        include:
          # Tier1: https://doc.rust-lang.org/nightly/rustc/platform-support.html#tier-1
          - target: aarch64-unknown-linux-gnu
            # apt: gcc-aarch64-linux-gnu
          - target: i686-pc-windows-gnu
            rust: nightly-x86_64-gnu
            os: windows-latest
            # TODO: error: linker `i686-w64-mingw32-gcc` not found
            bin-fail: true
          - target: i686-pc-windows-msvc
            os: windows-latest
          - target: i686-unknown-linux-gnu
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: x86_64-pc-windows-gnu
            rust: nightly-x86_64-gnu
            os: windows-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest
          - target: x86_64-unknown-linux-gnu

          # Tier2: https://doc.rust-lang.org/nightly/rustc/platform-support.html#tier-2
          - target: aarch64-apple-darwin
            os: macos-latest
            # TODO: error: linking with `cc` failed
            bin-fail: true
          - target: aarch64-apple-ios
            os: macos-latest
          - target: aarch64-fuchsia
            # TODO: error: linking with `rust-lld` failed
            bin-fail: true
          - target: aarch64-linux-android
          - target: aarch64-pc-windows-msvc
            os: windows-latest
          - target: aarch64-unknown-linux-musl
          - target: aarch64-unknown-none
            no-std: true
          - target: aarch64-unknown-none-softfloat
            no-std: true
          - target: arm-linux-androideabi
          - target: arm-unknown-linux-gnueabi
          - target: arm-unknown-linux-gnueabihf
          - target: arm-unknown-linux-musleabi
          - target: arm-unknown-linux-musleabihf
          - target: armebv7r-none-eabi
            no-std: true
          - target: armebv7r-none-eabihf
            no-std: true
          - target: armv5te-unknown-linux-gnueabi
          - target: armv5te-unknown-linux-musleabi
          - target: armv7-linux-androideabi
          - target: armv7a-none-eabi
            no-std: true
          - target: armv7r-none-eabi
            no-std: true
          - target: armv7r-none-eabihf
            no-std: true
          - target: armv7-unknown-linux-gnueabi
            apt: gcc-arm-linux-gnueabi
          - target: armv7-unknown-linux-gnueabihf
          - target: armv7-unknown-linux-musleabi
            # TODO: error: linking with `cc` failed
            bin-fail: true
          - target: armv7-unknown-linux-musleabihf
          - target: asmjs-unknown-emscripten
            # TODO: error: linking with `emcc` failed
            bin-fail: true
          - target: i586-pc-windows-msvc
            os: windows-latest
          - target: i586-unknown-linux-gnu
          - target: i586-unknown-linux-musl
          - target: i686-linux-android
          - target: i686-unknown-freebsd
            # TODO: error: linking with `cc` failed
            bin-fail: true
            apt: binutils-i686-kfreebsd-gnu libxi-dev
          - target: i686-unknown-linux-musl
          - target: mips-unknown-linux-gnu
          - target: mips-unknown-linux-musl
          - target: mips64-unknown-linux-gnuabi64
          - target: mips64-unknown-linux-muslabi64
            # TODO: error: linking with `cc` failed
            bin-fail: true
          - target: mips64el-unknown-linux-gnuabi64
          - target: mips64el-unknown-linux-muslabi64
            # TODO: error: linking with `cc` failed
            bin-fail: true
          - target: mipsel-unknown-linux-gnu
          - target: mipsel-unknown-linux-musl
          - target: nvptx64-nvidia-cuda
            no-std: true
            # TODO: error[E0463]: can't find crate for `std`
            bin-fail: true
            # apt: gcc-offload-nvptx
          - target: powerpc-unknown-linux-gnu
          - target: powerpc64-unknown-linux-gnu
            apt: gcc-powerpc64-linux-gnu
          - target: powerpc64le-unknown-linux-gnu
          - target: riscv32i-unknown-none-elf
            no-std: true
          - target: riscv32imac-unknown-none-elf
            no-std: true
          - target: riscv32imc-unknown-none-elf
            no-std: true
          - target: riscv64gc-unknown-linux-gnu
          - target: riscv64gc-unknown-none-elf
            no-std: true
          - target: riscv64imac-unknown-none-elf
            no-std: true
          - target: s390x-unknown-linux-gnu
          - target: sparc64-unknown-linux-gnu
            apt: gcc-sparc64-linux-gnu
          - target: sparcv9-sun-solaris
          - target: thumbv6m-none-eabi
            no-std: true
          - target: thumbv7em-none-eabi
            no-std: true
          - target: thumbv7em-none-eabihf
            no-std: true
          - target: thumbv7m-none-eabi
            no-std: true
          - target: thumbv7neon-linux-androideabi
            # TODO: error: linking with `cc` failed
            bin-fail: true
          - target: thumbv7neon-unknown-linux-gnueabihf
            apt: gcc-arm-linux-gnueabihf
          - target: thumbv8m.base-none-eabi
            no-std: true
          - target: thumbv8m.main-none-eabi
            no-std: true
          - target: thumbv8m.main-none-eabihf
            no-std: true
          - target: wasm32-unknown-emscripten
            # TODO: error: linking with `cc` failed
            bin-fail: true
          - target: wasm32-unknown-unknown
          - target: wasm32-wasi
          - target: x86_64-apple-ios
            os: macos-latest
          - target: x86_64-fortanix-unknown-sgx
          - target: x86_64-fuchsia
            # TODO: error: linking with `rust-lld` failed
            bin-fail: true
          - target: x86_64-linux-android
          - target: x86_64-rumprun-netbsd
            # TODO: error: linker `x86_64-rumprun-netbsd-gcc` not found
            bin-fail: true
          - target: x86_64-sun-solaris
          - target: x86_64-unknown-freebsd
            # TODO: error: linking with `cc` failed
            bin-fail: true
            apt: binutils-x86-64-kfreebsd-gnu libxi-dev
          - target: x86_64-unknown-illumos
            # TODO: error: linking with `cc` failed
            bin-fail: true
          - target: x86_64-unknown-linux-gnux32
            # TODO: error: linking with `cc` failed
            bin-fail: true
            apt: gcc-multilib-x86-64-linux-gnux32
          - target: x86_64-unknown-linux-musl
          - target: x86_64-unknown-netbsd
          - target: x86_64-unknown-redox
            # TODO: error: linking with `cc` failed
            bin-fail: true

    runs-on: ${{ matrix.os || 'ubuntu-latest' }}
    steps:
      - uses: actions/checkout@v2
      - uses: taiki-e/github-actions/install-rust@main
        with:
          target: ${{ matrix.target }}

      - if: matrix.apt != ''
        run: |
          sudo apt-get update
          sudo apt-get install ${{ matrix.apt }}

      - if: contains(matrix.target, 'musl')
        run: |
          sudo apt-get install musl musl-dev musl-tools

      - if: endsWith(matrix.target, 'emscripten')
        run: ci/install-emscripten.sh

      # - if: endsWith(matrix.target, 'rumprun-netbsd')
      #   run: ci/install-rumprun.sh

      - if: contains(matrix.target, 'apple')
        run: |
          sudo xcode-select -s "/Applications/Xcode_12.2.app"
          echo "DEVELOPER_DIR=/Applications/Xcode_12.2.app/Contents/Developer" >> $GITHUB_ENV

      - run: scripts/target-test.sh ${{ matrix.target }}
        env:
          BUILD_BIN_FAIL: ${{ matrix.bin-fail }}
          BUILD_STD_FAIL: ${{ matrix.no-std }}
