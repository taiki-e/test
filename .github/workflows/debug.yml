name: Debug

on:
  push:

env:
  CARGO_INCREMENTAL: 0
  RUSTFLAGS: -D warnings
  RUST_BACKTRACE: 1

defaults:
  run:
    shell: bash

jobs:
  debug:
    strategy:
      fail-fast: false
      matrix:
        build:
          - { target: x86_64-apple-darwin, os: macos-latest }
          - { target: x86_64-pc-windows-msvc, os: windows-latest }
          - { target: x86_64-unknown-linux-gnu, os: ubuntu-latest }
    runs-on: ${{ matrix.build.os }}
    steps:
      - uses: actions/checkout@v2
      - run: |
          ./scripts/install.sh
          rust-test --help

  test:
    name: ${{ matrix.build.target || matrix.build.rust }}
    strategy:
      fail-fast: false
      matrix:
        build:
          - { rust: stable }
          # Tier1
          - { target: aarch64-unknown-linux-gnu, os: ubuntu-latest }
          # - { rust: nightly-x86_64-gnu, target: i686-pc-windows-gnu, os: windows-latest }
          - { target: i686-pc-windows-msvc, os: windows-latest }
          - { target: i686-unknown-linux-gnu, os: ubuntu-latest }
          - { target: x86_64-apple-darwin, os: macos-latest }
          # - { rust: nightly-x86_64-gnu, target: x86_64-pc-windows-gnu, os: windows-latest }
          - { target: x86_64-pc-windows-msvc, os: windows-latest }
          - { target: x86_64-unknown-linux-gnu, os: ubuntu-latest }
          # Tier2
          - { target: x86_64-unknown-linux-musl, os: ubuntu-latest }
    runs-on: ${{ matrix.build.os || 'ubuntu-latest' }}
    steps:
      - uses: actions/checkout@v2
      - uses: taiki-e/github-actions/install-rust@main
        with:
          toolchain: ${{ matrix.build.rust || 'nightly' }}
      - run: |
          set -ex
          host=$(rustc -Vv | grep host | sed 's/host: //')
          target=${{ matrix.build.target }}
          target=${target:-${host}}
          if [[ "${host}" == "${target}" ]]; then
            cargo="cargo"
          elif [[ "${host}" =~ windows ]]; then
            rustup target add $target
            cargo="cargo"
          else
            cargo install cross
            cargo="cross"
          fi
          $cargo build --target $target
